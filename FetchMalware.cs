using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace GP_EncriptionFiles
{
    public class FetchMalware
    {
        public static async Task FetchMalwareData(string fileTypemalware = "pdf", string limit = "100")
        {
            var url = "https://mb-api.abuse.ch/api/v1/";
            var client = new HttpClient();
            var data = new FormUrlEncodedContent(new[]
            {
            new KeyValuePair<string, string>("query", "get_file_type"),
            new KeyValuePair<string, string>("file_type", fileTypemalware),
            new KeyValuePair<string, string>("limit", limit)
             });

            var response = await client.PostAsync(url, data);

            if (response.IsSuccessStatusCode)
            {
                using var responseStream = await response.Content.ReadAsStreamAsync();
                var responseJson = await JsonDocument.ParseAsync(responseStream);

                if (responseJson.RootElement.TryGetProperty("data", out var samples) && samples.GetArrayLength() > 0)
                {
                    foreach (var sample in samples.EnumerateArray())
                    {
                        // var downloadUrl = sample.GetProperty("download_url").GetString();
                        var sha256Hash = sample.GetProperty("sha256_hash").GetString();
                        var fileName = sample.GetProperty("file_name").GetString();
                        var fileType = sample.GetProperty("file_type").GetString();

                        var downloadResponse = await DownloadFile(client, sha256Hash, fileName, fileType);
                        Console.WriteLine(downloadResponse);
                    }
                }
                else
                {
                    Console.WriteLine("No samples found in the response.");
                }
            }
            else
            {
                Console.WriteLine($"Request failed with status code: {response.StatusCode}");
            }
        }

        static async Task<string> DownloadFile(HttpClient client, string sha256Hash, string fileName, string fileType)
        {
            var payload = new FormUrlEncodedContent(new[]
            {
            new KeyValuePair<string, string>("query", "get_file"),
            new KeyValuePair<string, string>("sha256_hash", sha256Hash)
        });
            var headers = new Dictionary<string, string> { { "API-KEY", "XYZ123" } };

            var downloadResponse = await client.PostAsync("https://mb-api.abuse.ch/api/v1/", payload);

            if (downloadResponse.IsSuccessStatusCode)
            {
                var downloadFolder = Path.Combine(Directory.GetCurrentDirectory(), "download_sample_files");
                Directory.CreateDirectory(downloadFolder); // Creates directory if it doesn't exist

                var filePath = Path.Combine(downloadFolder, $"{fileName}.{fileType}");

                await using var fileStream = new FileStream(filePath, FileMode.Create);
                await downloadResponse.Content.CopyToAsync(fileStream);

                return $"Downloaded '{fileName}' successfully.";
            }
            else
            {
                return $"Failed to download the file. Status code: {downloadResponse.StatusCode}";
            }
        }
    }
}
